//
(function() {
    'use strict';

    // Logging utility
    function log(message) {
        console.log(`[Game Automation]: ${message}`);
    }

    log('Bot starting...');
    alert('Dev Dien Airdrop 2024 zalo; 0899717143: Bot đang khởi động...');

    // Simulate mouse click at given coordinates
    function Clickxy(element, x, y) {
        if (!element) return;
        ['mousedown', 'mouseup', 'click'].forEach(eventType => {
            const clickEvent = new MouseEvent(eventType, {
                view: window,
                bubbles: true,
                cancelable: true,
                clientX: x,
                clientY: y
            });
            element.dispatchEvent(clickEvent);
        });
    }

    // Start the game
    function startGame() {
        log('Attempting to start the game');
        const startButton = document.querySelector('.Game_entry__playBtn__1Gi2c');
        if (startButton) {
            log('Đã tìm thấy nút bắt đầu, nhấp để bắt đầu trò chơi...');
            Clickxy(startButton);
            setTimeout(playGame, 5000);
        } else {
            log('Không tìm thấy nút bắt đầu trò chơi');
        }
    }

    let playInterval;

    // Play the game
    function playGame() {
        const canvas = document.querySelector('.canvas-wrapper canvas');
        if (canvas) {
            if (!playInterval) {
                playInterval = setInterval(() => {
                    if (document.querySelector('.canvas-wrapper canvas')) {
                        Clickxy(canvas, canvas.width / 2, canvas.height / 2);
                    } else {
                        clearInterval(playInterval);
                        playInterval = null;
                    }
                }, 1000);
            }
        } else {
            log('Canvas not found. Selector: .canvas-wrapper canvas');
        }
    }

    // Check if pixel is valid (yellow, not black or gray)
    function isValidPixel(x, y, canvas) {
        if (!canvas) return false; // Ensure canvas is not null
        const ctx = canvas.getContext('2d');
        if (!ctx) return false; // Ensure context is valid
        const pixel = ctx.getImageData(x, y, 1, 1).data;
        const [r, g, b] = pixel;

        return (r === 255 && g === 255 && b === 0) ||  // Yellow
               (r === 255 && g === 255 && b === 204) || // Light Yellow
               (r === 255 && g === 165 && b === 0) ||    // Orange
               !(r === 0 && g === 0 && b === 0) &&       // Not Black
               !(r === 128 && g === 128 && b === 128);  // Not Gray
    }

    // Find valid elements
    function findYellowElements() {
        const elements = document.querySelectorAll('*');
        const validElements = [];
        const canvas = document.querySelector('.canvas-wrapper canvas'); // Query canvas outside the loop

        if (!canvas) {
            log('Canvas not found. Selector: .canvas-wrapper canvas');
            return validElements; // Exit if no canvas
        }

        elements.forEach(element => {
            const rect = element.getBoundingClientRect();
            if (isValidPixel(rect.left + rect.width / 2, rect.top + rect.height / 2, canvas)) {
                validElements.push(element);
            }
        });

        return validElements;
    }

    // Show tooltip for an element
    function showElementName(element) {
        const rect = element.getBoundingClientRect();
        const name = element.textContent.trim() || 'Không có tên';

        const tooltip = document.createElement('div');
        tooltip.textContent = name;
        tooltip.style.position = 'absolute';
        tooltip.style.left = `${rect.left + window.scrollX}px`;
        tooltip.style.top = `${rect.top + window.scrollY - 30}px`;
        tooltip.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
        tooltip.style.color = 'white';
        tooltip.style.padding = '5px';
        tooltip.style.borderRadius = '5px';
        tooltip.style.zIndex = '9999';
        document.body.appendChild(tooltip);

        // Hide tooltip after 2 seconds
        setTimeout(() => {
            document.body.removeChild(tooltip);
        }, 2000);

        return rect;
    }

    // Click on valid elements
    function clickValidElements() {
        const validElements = findYellowElements();
        if (validElements.length > 0) {
            validElements.forEach((element) => {
                const rect = showElementName(element);
                setTimeout(() => {
                    Clickxy(element, rect.left + rect.width / 2, rect.top + rect.height / 2);
                }, 2000); // Wait 2 seconds before clicking
            });
        } else {
            log('Không tìm thấy phần tử hợp lệ.');
        }
    }

    // Find button by text
    function findButtonByText(textArray) {
        const buttons = document.querySelectorAll('button');
        for (let button of buttons) {
            const buttonText = button.textContent.trim();
            if (textArray.some(text => buttonText.startsWith(text))) {
                return button;
            }
        }
        return null;
    }

    // Check score and continue playing
    function checkScoreAndContinue() {
        const scoreElement = document.querySelector('.bn-flex.relative.flex-col.items-center');
        if (scoreElement) {
            const scoreText = scoreElement.querySelector('.text-5xl.font-semibold.text-white');
            if (scoreText) {
                const score = scoreText.textContent;
                log(`Bạn kiếm được ${score} điểm`);

                setTimeout(() => {
                    let continueButton = findButtonByText(['Chơi lại', 'Play Again']);
                    if (continueButton) {
                        log('Tìm thấy nút "Chơi lại", nhấp để tiếp tục...');
                        Clickxy(continueButton);
                    } else {
                        continueButton = findButtonByText(['Tiếp tục', 'Continue']);
                        if (continueButton) {
                            log('Tìm thấy nút "Tiếp tục", nhấp để tiếp tục...');
                            Clickxy(continueButton);
                        } else {
                            log('Không tìm thấy nút để tiếp tục chơi');
                        }
                    }
                }, 3000);
            }
        }
    }

    // Monitor DOM changes
    function monitorDOM() {
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.type === 'childList' || mutation.type === 'subtree') {
                    const startButton = document.querySelector('.Game_entry__playBtn__1Gi2c');
                    if (startButton) {
                        log('Bắt đầu trò chơi...');
                        startGame();
                    }
                    const canvas = document.querySelector('.canvas-wrapper canvas');
                    if (canvas) {
                        log('Đang chuẩn bị chơi...');
                        playGame();
                    }
                    checkScoreAndContinue();
                    clickValidElements(); // Call to click valid elements
                }
            });
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
        log('DOM monitoring started');
    }

    // Start monitoring when the DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', monitorDOM);
    } else {
        monitorDOM();
    }
})();
